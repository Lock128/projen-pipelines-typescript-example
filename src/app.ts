// ~~ Generated by projen
/* eslint-disable */
import { App, AppProps, Stack, StackProps } from 'aws-cdk-lib';

/**
 * PipelineAppProps is an extension of AppProps, which is part of the AWS CDK core.
 * It includes optional functions to provide AWS Stacks for different stages.
 *
 * Use these functions to instantiate your application stacks with the parameters for
 * each stage
 */
export interface PipelineAppProps extends AppProps {
  /** This function will be used to generate a dev stack. */
  provideDevStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a dev2 stack. */
  provideDev2Stack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a staging stack. */
  provideStagingStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a preprod stack. */
  providePreprodStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a prod stack. */
  provideProdStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a prod_us stack. */
  provideProdUsStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a prod_in stack. */
  provideProdInStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a ind1 stack. */
  provideInd1Stack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a ind2 stack. */
  provideInd2Stack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;

}

/**
 * PipelineAppStackProps is an extension of StackProps, which is part of the AWS CDK core.
 * It includes an additional property to specify the stage name.
 */
export interface PipelineAppStackProps extends StackProps {
  stageName: string;
}

/**
 * The PipelineApp class extends the App class from AWS CDK and overrides the constructor to support
 * different stages of the application (development, production, personal, feature) by invoking the provided
 * stack-providing functions from the props.
 */
export class PipelineApp extends App {
  constructor(props: PipelineAppProps) {
    super(props);

    // If a function is provided for creating a dev stack, it is called with necessary arguments.
    if (props.provideDevStack) {
      props.provideDevStack(this, 'MyApp-dev', { env: { account: '111111111111', region: 'eu-central-1' }, stackName: 'MyApp-dev', stageName: 'dev' });
    }
    // If a function is provided for creating a dev2 stack, it is called with necessary arguments.
    if (props.provideDev2Stack) {
      props.provideDev2Stack(this, 'MyApp-dev2', { env: { account: '13131313', region: 'eu-central-1' }, stackName: 'MyApp-dev2', stageName: 'dev2' });
    }
    // If a function is provided for creating a staging stack, it is called with necessary arguments.
    if (props.provideStagingStack) {
      props.provideStagingStack(this, 'MyApp-staging', { env: { account: '1212121212', region: 'eu-central-1' }, stackName: 'MyApp-staging', stageName: 'staging' });
    }
    // If a function is provided for creating a preprod stack, it is called with necessary arguments.
    if (props.providePreprodStack) {
      props.providePreprodStack(this, 'MyApp-preprod', { env: { account: '111111111111', region: 'eu-central-1' }, stackName: 'MyApp-preprod', stageName: 'preprod' });
    }
    // If a function is provided for creating a prod stack, it is called with necessary arguments.
    if (props.provideProdStack) {
      props.provideProdStack(this, 'MyApp-prod', { env: { account: '222222222222', region: 'eu-west-1' }, stackName: 'MyApp-prod', stageName: 'prod' });
    }
    // If a function is provided for creating a prod_us stack, it is called with necessary arguments.
    if (props.provideProdUsStack) {
      props.provideProdUsStack(this, 'MyApp-prod_us', { env: { account: '222222222222', region: 'us-west-2' }, stackName: 'MyApp-prod_us', stageName: 'prod_us' });
    }
    // If a function is provided for creating a prod_in stack, it is called with necessary arguments.
    if (props.provideProdInStack) {
      props.provideProdInStack(this, 'MyApp-prod_in', { env: { account: '222222222222', region: 'ap-southeast-1' }, stackName: 'MyApp-prod_in', stageName: 'prod_in' });
    }
    // If a function is provided for creating a ind1 stack, it is called with necessary arguments.
    if (props.provideInd1Stack) {
      props.provideInd1Stack(this, 'MyApp-ind1', { env: { account: '111111111111', region: 'eu-central-1' }, stackName: 'MyApp-ind1', stageName: 'ind1' });
    }
    // If a function is provided for creating a ind2 stack, it is called with necessary arguments.
    if (props.provideInd2Stack) {
      props.provideInd2Stack(this, 'MyApp-ind2', { env: { account: '13131313', region: 'eu-central-1' }, stackName: 'MyApp-ind2', stageName: 'ind2' });
    }


  }
}
